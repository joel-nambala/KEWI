
@{
    ViewBag.Title = "Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            @if (TempData["Error"] != null)
            {
                <div class="alert alert-danger">@TempData["Error"]</div>
            }
            @if (TempData["Success"] != null)
            {
                <div class="alert alert-success">@TempData["Success"]</div>
            }
        </div>
    </div>
    <div class="row">
        <div class="col-12 col-md-6 d-flex">
            <div class="card flex-fill border-0">
                <div class="card-body p-0 d-flex flex-fill">
                    <div class="row g-0 w-100">
                        <div class="col-12">
                            <div class="p-3 m-1">
                                <h4>Welcome Back, @ViewBag.StudentName</h4>
                                <p class="mb-0" id="clock"></p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-6 d-flex">
            <div class="card flex-fill border-0">
                <div class="card-body py-4">
                    <div class="d-flex align-items-start">
                        <div class="flex-grow-1">
                            <h4 class="mb-2">
                                Kshs. <span id="fee-balance"></span>
                            </h4>
                            <p class="mb-2">
                                Balance
                            </p>
                            <div class="mb-0">
                                @*<span class="badge text-success me-2">
                                        +9.0%
                                    </span>*@
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @if (!AcademicsHelper.IsStudentRegistered())
    {
        if (!AcademicsHelper.SemesterRegistrationPassed())
        {
            DateTime dateline = AcademicsHelper.GetCurrentSemesterDetails()[0] == null ? DateTime.Today : Convert.ToDateTime(AcademicsHelper.GetCurrentSemesterDetails()[0]);
            <div class="alert alert-warning mt-3">
                <p><strong>Notice:</strong> You are not registered for the current semester. Please complete your registration. Registration for the semester ends on @dateline.ToString("dddd MMM yyyy"). There will be no extension</p>
            </div>
        }
        else
        {
<div class="alert alert-warning mt-3">
    <p> <strong>Notice:</strong> Semester registration has passed. Please contact the administration for assistance.</p>
</div>
        }
    }
    <div class="charts row mb-4">
        <div class="bar-charts col-md-8">
            <div class="card p-4">
                <canvas id="bar-chart"></canvas>
            </div>
        </div>
        <div class="notifications col-md-4">
            <div class="card">
                <div class="notification-container p-3">
                    <h5 class="mb-3">Transactions Summary</h5>
                    <div id="notification-container">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                    <a href="@Url.Action("feestatement","finance")" class="btn btn-success">View More</a>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.8/dist/chart.umd.min.js"></script>
<script type="text/javascript">
    const notificationContainer = document.getElementById('notification-container');

    const formartNumber = function (number) {
        return new Intl.NumberFormat('en-US').format(number);
    }

    const getStudentFeesStatement = async function () {
        const response = await fetch('/api/getfeestatement');
        const result = await response.json();
        let html = '';
        result.slice(result.length - 5).forEach(item => html += `
        <div class="alert alert-info p-2 d-flex flex-column">
            <span>${item.Description}</span>
            <span>Date: ${item.PostingDate}</span>
        </div>`);
        notificationContainer.innerHTML = '';
        notificationContainer.innerHTML = html;
    }
    getStudentFeesStatement();

    const getStudentFees = async function () {
        const response = await fetch('/dashboard/getstudentfees');
        const result = await response.json();
        displayChart(result.CreditAmount, result.DebitAmount, result.Balance);
    }
    getStudentFees();

    const displayChart = function (billed, paid, balance) {
        let barChart = document.getElementById('bar-chart').getContext('2d');
        const feeBalance = document.getElementById('fee-balance');
        let transactionsChart = new Chart(barChart, {
            type: 'doughnut',
            data: {
                labels: ['Total Billed', 'Total Paid', 'Balance'],
                datasets: [
                    {
                        label: 'Transactions',
                        data: [billed, paid, balance],
                    },
                ],
            },
            options: {
                plugins: {
                    title: {
                        display: true,
                        text: 'Payment Transactions',
                        font: {
                            size: 18,
                        },
                    },
                    legend: {
                        display: true,
                    },
                },
            },
        });

        feeBalance.textContent = formartNumber(balance);
    };

    const getCurrentTime = function () {
        const clock = document.getElementById('clock');
        const now = new Date();
        const currentTime = new Intl.DateTimeFormat('en-US', { hour: 'numeric', minute: 'numeric', second: 'numeric', year: 'numeric', month: 'short', weekday: 'long', day: 'numeric' }).format(now);
        clock.innerHTML = currentTime;
    }
    setInterval(getCurrentTime, 1000);
</script>